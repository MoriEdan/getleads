<?php

/**
 * This is the model class for table "user".
 *
 * The followings are the available columns in table 'user':
 * @property string $id
 * @property string $username
 * @property string $password
 * @property string $first_name
 * @property string $last_name
 * @property string $email
 * @property string $auth_code
 * @property integer $is_admin
 * @property integer $is_active
 * @property string $created_at
 * @property integer $is_shop
 * @property string $company
 */
class User extends CActiveRecord
{
	/**
	 * Returns the static model of the specified AR class.
	 * @param string $className active record class name.
	 * @return User the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return 'user';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
			 array('username, password', 'required','on'=>'addShop'),
			  array('username', 'required','on'=>'updateShop'),
			array('is_admin, is_active, is_shop', 'numerical', 'integerOnly'=>true),
			array('username', 'length', 'max'=>30),
			array('password, auth_code', 'length', 'max'=>32),
			array('first_name, last_name, email', 'length', 'max'=>100),
			array('company', 'length', 'max'=>255),
			// The following rule is used by search().
			// Please remove those attributes that should not be searched.
			array('id, username, password, first_name, last_name, email, auth_code, is_admin, is_active, created_at, is_shop, company', 'safe', 'on'=>'search'),
		);
	}
public function beforeSave() {
            if($this->isNewRecord) {
                $this->is_admin = 0;
                if(!$this->is_active){
                $this->is_active = 0;
                }
                $this->created_at = new CDbExpression('NOW()');
            }
            return parent::beforeSave();
        }
        
        public function afterDelete() {
            $qrs = $this->qrs;
            if($qrs) {
                foreach($qrs as $qr) {
                    $qr->delete();
                }
            }
            return parent::afterDelete();
        }
        
        
	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
                    'qrs' => array(self::HAS_MANY, 'Qr', 'user_id'),
                    'qrCount'=>array(self::STAT, 'Qr', 'user_id', ),
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'id' => 'ID',
			'username' => 'Username',
			'password' => 'Password',
			'first_name' => 'First Name',
			'last_name' => 'Last Name',
			'email' => 'Email',
			'auth_code' => 'Auth Code',
			'is_admin' => 'Is Admin',
			'is_active' => 'Is Active',
			'created_at' => 'Created At',
			'is_shop' => 'Is Shop',
			'company' => 'Company',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.
	 */
	public function search()
	{
		// Warning: Please modify the following code to remove attributes that
		// should not be searched.

		$criteria=new CDbCriteria;

		$criteria->compare('id',$this->id,true);
		$criteria->compare('username',$this->username,true);
		$criteria->compare('password',$this->password,true);
		$criteria->compare('first_name',$this->first_name,true);
		$criteria->compare('last_name',$this->last_name,true);
		$criteria->compare('email',$this->email,true);
		$criteria->compare('auth_code',$this->auth_code,true);
		$criteria->compare('is_admin',$this->is_admin);
		$criteria->compare('is_active',$this->is_active);
		$criteria->compare('created_at',$this->created_at,true);
		$criteria->compare('is_shop',$this->is_shop);
		$criteria->compare('company',$this->company,true);

		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}
         public function authAdmin($user, $password) {
            return $this->findByAttributes(array(
                'username' => $user,
                'password' => md5($password),
                'is_admin' => 1,
                'is_active' => 1,
            ));
        }
        
        public function authUser($user, $password) {
            return $this->findByAttributes(array(
                'username' => $user,
                'password' => md5($password),
                'is_active' => 1,
            ));
        }
}